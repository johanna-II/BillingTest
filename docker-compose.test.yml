services:
  # Main test runner with full coverage
  test-full:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
      args:
        PYTHON_VERSION: 3.12-slim
    depends_on:
      mock-server:
        condition: service_healthy
    volumes:
      - .:/app
      - ./htmlcov:/app/htmlcov
      - ./report:/app/report
    environment:
      - PYTHONUNBUFFERED=1
      - USE_MOCK_SERVER=true
      - MOCK_SERVER_URL=http://mock-server:5000/api/v1
      - MOCK_SERVER_PORT=5000
    command: >
      python -m pytest
      --cov=libs
      --cov-report=term-missing
      --cov-report=html
      --cov-report=xml
      --cov-omit=libs/observability/*
      tests/unit
      -v
      --use-mock
    networks:
      - test-network

  # Quick test runner without coverage
  test-quick:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test-minimal
      args:
        PYTHON_VERSION: 3.12-slim
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
    command: python -m pytest tests/unit -q
    networks:
      - test-network

  # Test on Python 3.11
  test-py311:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
      args:
        PYTHON_VERSION: 3.11-slim
    volumes:
      - .:/app
      - ./htmlcov:/app/htmlcov
      - ./report:/app/report
    environment:
      - PYTHONUNBUFFERED=1
    command: python -m pytest tests/unit --cov=libs -q
    networks:
      - test-network

  # Test on Python 3.10
  test-py310:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
      args:
        PYTHON_VERSION: 3.10-slim
    volumes:
      - .:/app
      - ./htmlcov:/app/htmlcov
      - ./report:/app/report
    environment:
      - PYTHONUNBUFFERED=1
    command: python -m pytest tests/unit --cov=libs -q
    networks:
      - test-network

  # Mock server for integration tests
  mock-server:
    build:
      context: .
      dockerfile: Dockerfile.mock
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=mock_server/app.py
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
      - MOCK_DATA_PATH=/app/mock_server/test_data.json
    volumes:
      - ./mock_server:/app/mock_server
      - ./docs/openapi:/app/docs/openapi
    # Resource limits for mock server
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 40s

  # Integration test runner (isolated, parallel-safe)
  test-integration:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    depends_on:
      mock-server:
        condition: service_healthy
    volumes:
      - .:/app
      - ./htmlcov:/app/htmlcov
      - ./report:/app/report
    environment:
      - PYTHONUNBUFFERED=1
      - USE_MOCK_SERVER=true
      - MOCK_SERVER_URL=http://mock-server:5000
      - MOCK_SERVER_PORT=5000
      - CI=true
    # Resource limits to prevent OOM and worker crashes
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    # Increase shared memory for pytest-xdist workers
    shm_size: '2gb'
    command: >
      python -m pytest
      tests/integration/
      -v
      --tb=short
      -n 2
      --timeout=300
      --timeout-method=thread
      --reruns=5
      --reruns-delay=3
      --max-worker-restart=15
      --dist=loadfile
      --cov=libs
      --cov-report=term-missing
      --cov-report=xml:coverage-integration.xml
      --junit-xml=test-results-integration.xml
      --use-mock
    networks:
      - test-network
  
  # Comprehensive test runner (450 combinations)
  test-comprehensive:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    depends_on:
      mock-server:
        condition: service_healthy
    volumes:
      - .:/app
      - ./htmlcov:/app/htmlcov
      - ./report:/app/report
    environment:
      - PYTHONUNBUFFERED=1
      - USE_MOCK_SERVER=true
      - MOCK_SERVER_URL=http://mock-server:5000
      - MOCK_SERVER_PORT=5000
      - CI=true
      # Prevent memory issues with large test suites
      - PYTEST_XDIST_WORKER_COUNT=2
    # Resource limits for heavy test suite
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    # Large shared memory for parallel workers
    shm_size: '4gb'
    command: >
      python -m pytest
      tests/integration/test_complete_450_combinations.py
      tests/integration/test_all_business_combinations.py
      tests/integration/test_comprehensive_business_logic.py
      -v
      --tb=short
      -n 2
      --timeout=600
      --timeout-method=thread
      --reruns=5
      --reruns-delay=5
      --max-worker-restart=20
      --dist=loadfile
      --junit-xml=test-results-comprehensive.xml
      --use-mock
    networks:
      - test-network

  # Contract test runner
  test-contracts:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    depends_on:
      mock-server:
        condition: service_healthy
    volumes:
      - .:/app
      - ./htmlcov:/app/htmlcov
      - ./report:/app/report
    environment:
      - PYTHONUNBUFFERED=1
      - USE_MOCK_SERVER=true
      - MOCK_SERVER_URL=http://mock-server:5000/api/v1
    command: >
      python -m pytest
      tests/contracts/
      -v
      --use-mock
    networks:
      - test-network

  # Performance test runner
  test-performance:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    depends_on:
      mock-server:
        condition: service_healthy
    volumes:
      - .:/app
      - ./report:/app/report
    environment:
      - PYTHONUNBUFFERED=1
      - USE_MOCK_SERVER=true
      - MOCK_SERVER_URL=http://mock-server:5000/api/v1
    command: >
      python -m pytest
      tests/performance/
      -v
    networks:
      - test-network

  # Security test runner
  test-security:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    volumes:
      - .:/app
      - ./report:/app/report
    environment:
      - PYTHONUNBUFFERED=1
    command: >
      bash -c "
        bandit -r libs/ -f json -o report/security_scan.json;
        python -m pytest tests/security/ -v
      "
    networks:
      - test-network

networks:
  test-network:
    driver: bridge
