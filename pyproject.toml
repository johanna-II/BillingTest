[tool.poetry]
name = "billing-test"
version = "0.1.0"
description = "Billing System Test Suite"
authors = ["Billing Test Team <062042@naver.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "libs"}]

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.32.3"
python-dateutil = "^2.9.0"
beautifulsoup4 = "^4.12.3"

[tool.poetry.group.dev.dependencies]
black = "^25.9.0"
ruff = "^0.13.2"
mypy = "^1.13.0"
types-requests = "^2.32.0"
types-python-dateutil = "^2.9.0"
bandit = "^1.8.0"
pre-commit = "^3.8.0"
pydoclint = "^0.5.9"
vulture = "^2.14"
safety = "^3.2.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-html = "^4.1.1"
pytest-cov = "^7.0.0"
pytest-asyncio = "^1.2.0"
pytest-xdist = "^3.6.1"
flask = "^3.1.0"
flask-cors = "^6.0.0"
flask-caching = "^2.3.0"
locust = "^2.32.0"
pact-python = "^2.3.3"
pytest-timeout = "^2.4.0"

[tool.poetry.group.observability.dependencies]
opentelemetry-api = "^1.29.0"
opentelemetry-sdk = "^1.29.0"
opentelemetry-exporter-otlp = "^1.29.0"
opentelemetry-exporter-prometheus = "^0.50b0"

[tool.poetry.extras]
test = ["pytest", "pytest-html", "pytest-cov"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
  | __pycache__
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Like Black, indent with spaces, rather than tabs
indent-style = "space"
# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

[tool.ruff.lint]
# Enable ALL ruff rules
select = ["ALL"]
# Reasonable ignores for practical development
ignore = [
    "E501",    # line too long - handled by black
    "D203",    # one blank line before class (conflicts with D211)
    "D213",    # multi-line summary second line (conflicts with D212)
    "COM812",  # missing trailing comma - handled by black
    "ISC001",  # single line implicit string concatenation - conflicts with black
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "N999",    # Invalid module name (for test files)
    "N806",    # Variable in function should be lowercase
    "N802",    # Function name should be lowercase
    "EXE001",  # Shebang is present but file is not executable (Windows compatibility)
    "G004",    # Logging f-string (performance is not critical in tests)
    "F821",    # Undefined name (often false positives with fixtures)
    "S311",    # Standard pseudo-random generators for non-crypto use
    "DTZ005",  # datetime.now() without tzinfo (not critical for tests)
    "TRY401",  # Verbose log message
    "ANN201",  # Missing return type annotation for public function
    "T201",    # Print found (CLI tools need print statements)
    "ANN001",  # Missing type annotation for function argument
    "C417",    # Unnecessary map usage
    "RUF018",  # Avoid assignment expressions in assert
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "TRY300",  # Consider else block
    "S113",    # Request without timeout (handled at client level)
    "INP001",  # Implicit namespace package
    "E402",    # Module import not at top of file (needed for setup)
    "PLC0415", # Import outside top-level (needed for circular import prevention)
    "PLR2004", # Magic value comparison (clear values needed in tests)
    "S110",    # try-except-pass (sometimes needed in tests)
    "BLE001",  # Blind except (sometimes needed for robustness)
    "ANN202",  # Missing return type for private function
    "ANN204",  # Missing return type for special method
    "ANN205",  # Missing return type for staticmethod
    "PTH123",  # open() instead of Path.open() (simpler for tests)
    "PTH120",  # os.path.dirname instead of Path.parent
    "PTH118",  # os.path.join instead of Path with /
    "PTH100",  # os.path.abspath instead of Path.resolve (legacy code)
    "PTH103",  # os.makedirs instead of Path.mkdir (legacy code)
    "PTH110",  # os.path.exists instead of Path.exists (legacy code)
    "ARG001",  # Unused function argument (fixtures)
    "ARG002",  # Unused method argument (overrides)
    "ANN401",  # Any type (sometimes needed)
    "B904",    # raise without from (not always needed)
    "S603",    # subprocess without shell (controlled environment)
    "N817",    # camelcase imported as acronym
    "PLR0913", # Too many arguments (some functions need many)
    "B017",    # assert raises exception (pytest pattern)
    "S607",    # Start process with partial path
    "SIM105",  # suppressible exception (clarity over brevity)
    "PT017",   # assert in except (valid test pattern)
    "ERA001",  # commented out code (sometimes needed for context)
    "N813",    # camelcase imported as lowercase
    "S104",    # Hardcoded bind all interfaces (needed for servers)
    "S201",    # Flask debug true (testing only)
    "C901",    # Function is too complex (requires major refactoring)
    "PLR0911", # Too many return statements (style preference)
    "PLR0912", # Too many branches (requires refactoring)
    "PLR0915", # Too many statements (requires refactoring)
    "N803",    # Argument name should be lowercase (legacy API compatibility)
    "N818",    # Exception name should end with Error (legacy compatibility)
    "DTZ007",  # Datetime without timezone (not critical for tests)
    "DTZ003",  # Use of datetime.utcnow (not critical)
    "SIM102",  # Use single if statement (readability preference)
    "SIM117",  # Multiple with statements (readability preference)
    "PLW0603", # Global statement (needed for singletons)
    "PLW2901", # For loop variable overwritten (intentional)
    "E722",    # Bare except (sometimes needed)
    "B007",    # Unused loop variable (intentional)
    "PERF401", # Manual list comprehension (readability)
    "FBT003",  # Boolean positional value (API design)
    "ARG005",  # Unused lambda argument (needed for interface)
    "LOG015",  # Root logger (simplicity in tests)
    "RUF012",  # Mutable class default (controlled usage)
    "PT012",   # pytest.raises complex (testing patterns)
    "D205",    # Blank line in docstring (style preference)
]

[tool.ruff.lint.per-file-ignores]
# Test files have different requirements
"tests/*" = [
    "S101",    # assert is needed in pytest
    "ANN001",  # type annotations for function arguments in tests
    "ANN201",  # return type annotations for test functions
    "D103",    # docstrings for public functions (test names are self-documenting)
    "PLR2004", # magic values are common in tests
    "ARG002",  # unused function arguments (fixtures)
    "PT011",   # pytest.raises without match is sometimes ok
    "PLC0415", # import inside function is sometimes needed for test isolation
    "SLF001",  # private member access is sometimes needed in tests
]

# Library files use assert for type narrowing
"libs/http_client.py" = [
    "S101",    # assert used for type narrowing
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5
max-returns = 3
max-branches = 10
max-statements = 50

[tool.ruff.lint.isort]
# Use the same settings as black
profile = "black"
combine-as-imports = true
force-single-line = false
lines-between-types = 0
lines-after-imports = 2
known-first-party = ["libs", "tests", "config", "src", "mock_server"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.mypy]
python_version = "3.12"
# Enable strict mode
strict = true
# Additional strict checks
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Even stricter checks
disallow_any_unimported = true
disallow_any_expr = false  # Too restrictive for practical use
disallow_any_decorated = false  # Too restrictive for practical use
disallow_any_explicit = false  # Needed for some cases
disallow_any_generics = true
disallow_subclassing_any = true
# Import discovery
namespace_packages = true
explicit_package_bases = true
# Error output
show_error_codes = true
show_column_numbers = true
pretty = true

# Per-module overrides for legacy code
[[tool.mypy.overrides]]
module = "libs.Payments"
warn_return_any = false

[[tool.mypy.overrides]]
module = "libs.observability.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "libs.http_client"
warn_return_any = false

[[tool.mypy.overrides]]
module = "libs.Credit"
warn_return_any = false

[[tool.mypy.overrides]]
module = "libs.payment_api_client"
warn_return_any = false

[[tool.mypy.overrides]]
module = "config.*"
implicit_reexport = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=libs",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--junit-xml=report/junit.xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests for quick CI runs",
    "provider: marks tests as provider contract verification tests",
    "contract: marks tests as contract tests using Pact",
    "core: marks tests as core business logic tests (billing, credit, contract)",
    "api: marks tests as API integration tests",
    "observability: marks tests as observability and telemetry tests",
    "mock_required: marks tests that require mock server to be running",
    "credit: marks tests related to credit operations",
    "billing: marks tests related to billing operations",
    "adjustment: marks tests related to adjustments",
    "serial: marks tests that must run serially (not in parallel)",
    "performance: marks performance tests",
    "benchmark: marks benchmark tests",
    "security: marks security tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:pkg_resources",
    "ignore::DeprecationWarning:google.*",
    "ignore::UserWarning:google.rpc",
    "ignore::DeprecationWarning:importlib._bootstrap",
]

[tool.coverage.run]
source = ["libs"]
omit = [
    "*/tests/*",
    "*/conftest.py",
    "libs/observability/*",
    "libs/InitializeConfig.py",
    "libs/constants.py",
    "libs/billing_types.py",
    "libs/exceptions.py"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80  # Enforce minimum 80% coverage

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
severity = "low"
confidence = "low"
skips = []

[tool.vulture]
min_confidence = 60
paths = ["libs", "tests"]
exclude = ["conftest.py"]

[tool.pydoclint]
style = "google"
check-return-types = true
check-yield-types = true
check-class-attributes = true
require-return-section-when-returning-nothing = true
allow-init-docstring = false

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"
