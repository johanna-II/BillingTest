[tool.poetry]
name = "billing-test"
version = "0.1.0"
description = "Billing System Test Suite"
authors = ["Billing Test Team <062042@naver.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "libs"}]

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.32.3"
python-dateutil = "^2.9.0"
beautifulsoup4 = "^4.12.3"

[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
ruff = "^0.8.0"
mypy = "^1.13.0"
types-requests = "^2.32.0"
types-python-dateutil = "^2.9.0"
bandit = "^1.8.0"
pre-commit = "^3.8.0"
pydoclint = "^0.5.9"
vulture = "^2.14"
safety = "^3.2.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-html = "^4.1.1"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.24.0"
pytest-xdist = "^3.6.1"
flask = "^3.1.0"
flask-cors = "^6.0.0"
flask-caching = "^2.3.0"
locust = "^2.32.0"
pact-python = "^2.3.3"
pytest-timeout = "^2.4.0"

[tool.poetry.group.observability.dependencies]
opentelemetry-api = "^1.29.0"
opentelemetry-sdk = "^1.29.0"
opentelemetry-exporter-otlp = "^1.29.0"
opentelemetry-exporter-prometheus = "^0.50b0"

[tool.poetry.extras]
test = ["pytest", "pytest-html", "pytest-cov"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
  | __pycache__
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
# Enable ALL ruff rules
select = ["ALL"]
# Minimal ignores - only truly incompatible rules
ignore = [
    "E501",    # line too long - handled by black
    "D203",    # one blank line before class (conflicts with D211)
    "D213",    # multi-line summary second line (conflicts with D212)
    "COM812",  # missing trailing comma - handled by black
    "ISC001",  # single line implicit string concatenation - conflicts with black
]

[tool.ruff.lint.per-file-ignores]
# No exceptions for test files - they should follow all rules too
"tests/*" = []

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5
max-returns = 3
max-branches = 10
max-statements = 50

[tool.mypy]
python_version = "3.12"
# Enable strict mode
strict = true
# Additional strict checks
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Even stricter checks
disallow_any_unimported = true
disallow_any_expr = false  # Too restrictive for practical use
disallow_any_decorated = false  # Too restrictive for practical use
disallow_any_explicit = false  # Needed for some cases
disallow_any_generics = true
disallow_subclassing_any = true
# Import discovery
namespace_packages = true
explicit_package_bases = true
# Error output
show_error_codes = true
show_column_numbers = true
pretty = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=libs",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--junit-xml=report/junit.xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests for quick CI runs",
    "provider: marks tests as provider contract verification tests",
    "contract: marks tests as contract tests using Pact",
    "core: marks tests as core business logic tests (billing, credit, contract)",
    "api: marks tests as API integration tests",
    "observability: marks tests as observability and telemetry tests",
    "mock_required: marks tests that require mock server to be running",
    "credit: marks tests related to credit operations",
    "billing: marks tests related to billing operations",
    "adjustment: marks tests related to adjustments",
    "serial: marks tests that must run serially (not in parallel)",
    "performance: marks performance tests",
    "benchmark: marks benchmark tests",
    "security: marks security tests",
]

[tool.coverage.run]
source = ["libs"]
omit = [
    "*/tests/*", 
    "*/conftest.py",
    "libs/dependency_injection.py",
    "libs/observability/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80  # Enforce minimum 80% coverage

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
severity = "low"
confidence = "low"
skips = []

[tool.vulture]
min_confidence = 60
paths = ["libs", "tests"]
exclude = ["conftest.py"]

[tool.pydoclint]
style = "google"
check-return-types = true
check-yield-types = true
check-class-attributes = true
require-return-section-when-returning-nothing = true
allow-init-docstring = false

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"