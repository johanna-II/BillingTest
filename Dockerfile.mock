FROM python:3.13.7-slim

# Create non-root user for security
# Note: Using a non-root user prevents potential container breakout attacks
RUN groupadd -r mockuser && useradd -r -g mockuser mockuser

WORKDIR /app

# Install curl for healthcheck
# NOSONAR: docker:S6504 - Installing only curl without recommended packages for minimal image
RUN apt-get update && apt-get install -y --no-install-recommends curl && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy and install dependencies
# First try specific mock requirements, fallback to general requirements
# NOSONAR: docker:S6504 - Explicitly copying only requirements files, no sensitive data
COPY --chmod=444 requirements-mock.txt ./
COPY --chmod=444 requirements.txt ./
RUN if [ -f requirements-mock.txt ]; then \
        pip install --no-cache-dir -r requirements-mock.txt; \
    else \
        pip install --no-cache-dir flask==3.1.0 flask-cors==6.0.0 flask-caching==2.3.0 waitress==3.0.2 requests==2.32.3; \
    fi

# Copy mock server code with read-only permissions
# Note: Selectively copying only required directories instead of entire project
# Using 555 permissions for both files and directories (Python executes through interpreter)
COPY --chown=mockuser:mockuser --chmod=555 mock_server /app/mock_server

# Copy OpenAPI spec with read-only permissions (optional, will be mounted in docker-compose)
# Using 555 to ensure directory access (execute permission required for directories)
COPY --chown=mockuser:mockuser --chmod=555 docs/openapi /app/docs/openapi

# Ensure proper ownership of the working directory
RUN chown -R mockuser:mockuser /app

# Set Python path
ENV PYTHONPATH=/app:$PYTHONPATH

# Expose port
EXPOSE 5000

# Switch to non-root user
USER mockuser

# Run the mock server
CMD ["python", "-m", "mock_server.run_server"]
