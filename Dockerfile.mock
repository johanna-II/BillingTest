FROM python:3.12-slim

# Create non-root user for security
# Note: Using a non-root user prevents potential container breakout attacks
RUN groupadd -r mockuser && useradd -r -g mockuser mockuser

WORKDIR /app

# Install curl for healthcheck
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy and install dependencies
# First try specific mock requirements, fallback to general requirements
COPY --chmod=444 requirements-mock.txt requirements.txt* ./
RUN if [ -f requirements-mock.txt ]; then \
        pip install --no-cache-dir -r requirements-mock.txt; \
    else \
        pip install --no-cache-dir flask==3.1.0 flask-cors==6.0.0 flask-caching==2.3.0 waitress==3.0.2 requests==2.32.3; \
    fi

# Copy mock server code with immediate permission setting
# Note: Selectively copying only required directories instead of entire project
COPY --chown=mockuser:mockuser mock_server /app/mock_server
RUN find /app/mock_server -type f -exec chmod 444 {} + && \
    find /app/mock_server -type d -exec chmod 555 {} +

# Copy OpenAPI spec with immediate permission setting (optional, will be mounted in docker-compose)
COPY --chown=mockuser:mockuser docs/openapi /app/docs/openapi
RUN find /app/docs -type f -exec chmod 444 {} + && \
    find /app/docs -type d -exec chmod 555 {} +

# Ensure proper ownership of the working directory
RUN chown -R mockuser:mockuser /app

# Set Python path
ENV PYTHONPATH=/app:$PYTHONPATH

# Expose port
EXPOSE 5000

# Switch to non-root user
USER mockuser

# Run the mock server
CMD ["python", "-m", "mock_server.run_server"]
