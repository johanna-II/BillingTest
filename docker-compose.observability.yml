version: '3.8'

services:
  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: billing-test-jaeger
    ports:
      - "16686:16686"     # Jaeger UI
      - "6831:6831/udp"   # Jaeger agent UDP
      - "6832:6832/udp"   # Jaeger agent binary
      - "14268:14268"     # Jaeger collector
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - observability

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: billing-test-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - observability
    depends_on:
      - prometheus-config

  # Prometheus configuration generator
  prometheus-config:
    image: alpine:latest
    container_name: billing-test-prometheus-config
    volumes:
      - ./prometheus.yml:/prometheus.yml
    command: |
      sh -c "
        cat > /prometheus.yml << EOF
        global:
          scrape_interval: 15s
          evaluation_interval: 15s

        scrape_configs:
          # Scrape test metrics
          - job_name: 'billing-test'
            static_configs:
              - targets: ['host.docker.internal:9090']
            metrics_path: '/metrics'
            
          # Scrape mock server metrics if available
          - job_name: 'mock-server'
            static_configs:
              - targets: ['host.docker.internal:5000']
            metrics_path: '/metrics'
        EOF
      "
    networks:
      - observability

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: billing-test-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - observability
    depends_on:
      - prometheus
      - grafana-provisioning

  # Grafana provisioning setup
  grafana-provisioning:
    image: alpine:latest
    container_name: billing-test-grafana-provisioning
    volumes:
      - ./grafana/provisioning:/provisioning
    command: |
      sh -c "
        mkdir -p /provisioning/datasources /provisioning/dashboards
        
        # Create datasource configuration
        cat > /provisioning/datasources/prometheus.yml << EOF
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://prometheus:9090
            isDefault: true
            editable: true
        EOF
        
        # Create dashboard provider configuration
        cat > /provisioning/dashboards/default.yml << EOF
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            updateIntervalSeconds: 10
            allowUiUpdates: true
            options:
              path: /provisioning/dashboards
        EOF
      "
    networks:
      - observability

volumes:
  prometheus-data:
  grafana-data:

networks:
  observability:
    driver: bridge

