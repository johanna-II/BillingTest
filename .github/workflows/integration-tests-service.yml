name: Integration Tests (Service Container)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  integration-tests:
    name: Integration Tests with Mock Server
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # GitHub Actions Service Container - Mock Server
    services:
      mock-server:
        # Build from Dockerfile.mock
        # For now, we'll use docker build in the workflow
        # Later: push to ghcr.io and use: ghcr.io/${{ github.repository }}/mock-server:latest
        image: python:3.13.7-slim
        ports:
          - 5000:5000
        env:
          FLASK_ENV: production
          FLASK_APP: mock_server.app
          PYTHONUNBUFFERED: '1'
          MOCK_SERVER_RATE_LIMIT: '500'
        # We'll start the mock server in steps instead
        # options: >-
        #   --health-cmd "curl -f http://localhost:5000/health || exit 1"
        #   --health-interval 10s
        #   --health-timeout 5s
        #   --health-retries 10
        #   --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist pytest-timeout pytest-rerunfailures pytest-cov

      - name: Build Mock Server Docker Image
        run: |
          docker build -f Dockerfile.mock -t mock-server:latest .

      - name: Start Mock Server
        run: |
          # Run mock server in background
          docker run -d \
            --name mock-server \
            --network host \
            -p 5000:5000 \
            -e FLASK_ENV=production \
            -e FLASK_APP=mock_server.app \
            -e PYTHONUNBUFFERED=1 \
            -e MOCK_SERVER_RATE_LIMIT=500 \
            mock-server:latest

          echo "Mock server container started"

      - name: Wait for Mock Server
        run: |
          echo "Waiting for mock server to be ready..."
          for i in {1..60}; do
            if curl -f http://localhost:5000/health 2>/dev/null; then
              echo "✓ Mock server is ready after ${i} seconds"
              break
            fi
            if [[ $i -eq 60 ]]; then
              echo "✗ Mock server failed to start in 60 seconds"
              docker logs mock-server
              exit 1
            fi
            echo "Waiting for mock server... ($i/60)"
            sleep 1
          done

      - name: Verify Mock Server
        run: |
          echo "Mock server health check:"
          curl -v http://localhost:5000/health

          echo -e "\nMock server info:"
          curl -v http://localhost:5000/api/v1/info 2>&1 | grep -E "(< HTTP|rate limit)" || true

      - name: Run Integration Tests
        run: |
          pytest tests/integration/ \
            -v \
            --tb=short \
            -n 2 \
            --timeout=300 \
            --timeout-method=thread \
            --reruns=3 \
            --reruns-delay=2 \
            --max-worker-restart=15 \
            --dist=loadfile \
            --cov=libs \
            --cov-report=term-missing \
            --cov-report=xml:coverage-integration.xml \
            --junit-xml=test-results-integration.xml \
            --use-mock
        env:
          USE_MOCK_SERVER: 'true'
          MOCK_SERVER_URL: http://localhost:5000
          MOCK_SERVER_PORT: '5000'
          CI: 'true'
          PYTHONUNBUFFERED: '1'

      - name: Show Mock Server Logs (if failed)
        if: failure()
        run: |
          echo "Mock server logs:"
          docker logs mock-server

      - name: Stop Mock Server
        if: always()
        run: |
          docker stop mock-server || true
          docker rm mock-server || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results-integration.xml
            coverage-integration.xml
          retention-days: 30

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage-integration.xml
          flags: integration
          name: integration-tests
          fail_ci_if_error: false

  component-tests:
    name: Component Tests (responses)
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install responses pytest-cov

      - name: Run Component Tests
        run: |
          pytest tests/integration/mocked/ \
            -v \
            --tb=short \
            -n auto \
            --timeout=60 \
            --cov=libs \
            --cov-report=term-missing \
            --cov-report=xml:coverage-component.xml \
            --junit-xml=test-results-component.xml
        env:
          PYTHONUNBUFFERED: '1'

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: component-test-results
          path: |
            test-results-component.xml
            coverage-component.xml
          retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [integration-tests, component-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Display test summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Tests (Real Mock Server)" >> $GITHUB_STEP_SUMMARY
          if [[ -f integration-test-results/test-results-integration.xml ]]; then
            echo "✓ Integration tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Integration tests failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Component Tests (responses)" >> $GITHUB_STEP_SUMMARY
          if [[ -f component-test-results/test-results-component.xml ]]; then
            echo "✓ Component tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Component tests failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
