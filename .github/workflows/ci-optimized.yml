name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test execution mode'
        required: false
        default: 'fast'
        type: choice
        options:
          - fast
          - safe
          - parallel
          - full

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.7.1'
  USE_MOCK_SERVER: 'true'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Stage 1: Quick validation (< 2 minutes)
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      should_run_full_tests: ${{ steps.check.outputs.should_run }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check changed files
        id: check
        run: |
          # Skip full tests if only docs/configs changed
          git diff --name-only HEAD~1 HEAD > changed_files.txt
          if grep -qE '\.(py|yaml|yml|toml)$' changed_files.txt; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

      - name: Install dependencies (fast)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Syntax check
        run: |
          python -m py_compile libs/**/*.py tests/**/*.py

      - name: Quick lint
        run: |
          pip install ruff
          ruff check . --select=E9,F63,F7,F82 --show-source

  # Stage 2: Parallel quality checks
  quality-checks:
    name: ${{ matrix.check }}
    runs-on: ubuntu-latest
    needs: quick-check
    if: needs.quick-check.outputs.should_run_full_tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        check: [lint, type-check, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/poetry.lock') }}

      - name: Install Poetry
        if: matrix.check != 'security'
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          if [ "${{ matrix.check }}" = "security" ]; then
            pip install bandit safety
          else
            poetry install --no-interaction
          fi

      - name: Run ${{ matrix.check }}
        run: |
          case "${{ matrix.check }}" in
            lint)
              poetry run black . --check --diff
              poetry run ruff check . --output-format=github
              ;;
            type-check)
              poetry run mypy libs --strict
              ;;
            security)
              bandit -r libs -ll
              safety check --json
              ;;
          esac

  # Stage 3: Smart test execution
  test-smart:
    name: Test (${{ matrix.test-group }})
    runs-on: ubuntu-latest
    needs: quick-check
    if: needs.quick-check.outputs.should_run_full_tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - test-group: unit
            marker: "unit and not slow"
            parallel: 4
            member: kr
          - test-group: core-kr
            marker: "core and not serial"
            parallel: 2
            member: kr
          - test-group: core-jp
            marker: "core and not serial"
            parallel: 2
            member: jp
          - test-group: api
            marker: "api or contract"
            parallel: 2
            member: kr
          - test-group: serial
            marker: "serial"
            parallel: 1
            member: kr
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set test month
        id: set-month
        run: echo "MONTH=$(date +%Y-%m)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: billing-test:${{ github.sha }}
          cache-from: type=gha,scope=test
          cache-to: type=gha,scope=test,mode=max
          build-args: |
            INSTALL_DEV=true

      - name: Run ${{ matrix.test-group }} tests
        run: |
          docker run --rm \
            -e USE_MOCK_SERVER=true \
            -e PYTHONPATH=/workspace \
            -v ${{ github.workspace }}:/workspace \
            billing-test:${{ github.sha }} \
            python run_tests.py \
              --mode fast \
              tests \
              -m "${{ matrix.marker }}" \
              --env alpha \
              --member ${{ matrix.member }} \
              --month ${{ steps.set-month.outputs.MONTH }} \
              -n ${{ matrix.parallel }} \
              --junit-xml=/workspace/test-results/${{ matrix.test-group }}-results.xml \
              --cov=libs \
              --cov-report=xml:/workspace/coverage/${{ matrix.test-group }}-coverage.xml \
              --cov-append

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-group }}
          path: test-results/${{ matrix.test-group }}-results.xml

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage/${{ matrix.test-group }}-coverage.xml

  # Stage 4: Coverage merge and analysis
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: test-smart
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage-reports

      - name: Merge coverage reports
        run: |
          pip install coverage
          coverage combine coverage-reports/*
          coverage xml -o merged-coverage.xml
          coverage report --skip-covered

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./merged-coverage.xml
          fail_ci_if_error: false

      - name: Coverage gate check
        run: |
          coverage report --fail-under=60

  # Stage 5: Integration tests (only on main/develop)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-checks, test-smart]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run docker-compose tests
        run: |
          docker-compose -f docker-compose.yml up -d
          docker-compose run --rm billing-test \
            python run_tests.py --mode safe \
            --env alpha --member kr \
            -m "integration"
          docker-compose down

  # Final stage: Success notification
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality-checks, test-smart, coverage-analysis]
    if: success()
    
    steps:
      - name: Summary
        run: |
          echo "âœ… All checks passed!"
          echo "Time taken: ${{ github.run_duration }}ms"
