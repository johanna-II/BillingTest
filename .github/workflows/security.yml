name: Security Scan

on:
  push:
    branches: [ main ]
  schedule:
    # Run security scan weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '2.2.1'

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d  # v5.1.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b  # v1.3.4
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run Bandit security scan
        run: |
          poetry run bandit -r libs/ -f json -o bandit_report.json || true
          poetry run bandit -r libs/ -f txt -o bandit_summary.txt || true

      - name: Run Safety check
        run: |
          poetry run safety check --json > safety_report.json || true
          poetry run safety check > safety_summary.txt || true

      - name: Check for hardcoded secrets
        run: |
          # Install detect-secrets if not in dependencies
          pip install detect-secrets
          detect-secrets scan --all-files > secrets_report.json || true

      - name: Generate security summary
        if: always()
        run: |
          echo "# Security Scan Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Bandit Results" >> $GITHUB_STEP_SUMMARY
          if [[ -f bandit_summary.txt ]]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat bandit_summary.txt | head -50 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          if [[ -f safety_summary.txt ]]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat safety_summary.txt | head -50 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808  # v4.3.3
        if: always()
        with:
          name: security-reports
          path: |
            bandit_report.json
            bandit_summary.txt
            safety_report.json
            safety_summary.txt
            secrets_report.json

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            const fs = require('fs');
            let comment = '## üîí Security Scan Results\n\n';

            try {
              // Read Bandit summary
              if (fs.existsSync('bandit_summary.txt')) {
                const banditSummary = fs.readFileSync('bandit_summary.txt', 'utf8');
                const lines = banditSummary.split('\n').slice(0, 20);
                comment += '### Bandit (Code Security)\n```\n' + lines.join('\n') + '\n```\n\n';
              }

              // Read Safety summary
              if (fs.existsSync('safety_summary.txt')) {
                const safetySummary = fs.readFileSync('safety_summary.txt', 'utf8');
                const lines = safetySummary.split('\n').slice(0, 20);
                comment += '### Safety (Dependency Check)\n```\n' + lines.join('\n') + '\n```\n';
              }
            } catch (error) {
              comment += '‚ùå Error reading security scan results\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # SAST using CodeQL
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: Initialize CodeQL
        uses: github/codeql-action/init@df409f7d9260372bd5f19e5b04e83cb3c43714ae  # v3.27.9
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@df409f7d9260372bd5f19e5b04e83cb3c43714ae  # v3.27.9

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@df409f7d9260372bd5f19e5b04e83cb3c43714ae  # v3.27.9
