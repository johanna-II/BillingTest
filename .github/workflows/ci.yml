name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Black
        run: |
          poetry run black . --check --diff

      - name: Run Ruff
        run: |
          poetry run ruff check . --output-format=github

      - name: Run mypy
        run: |
          poetry run mypy libs --strict

      - name: Run Bandit security check
        run: |
          poetry run bandit -r libs -ll

  test:
    name: Test (${{ matrix.member }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        member: [kr, jp, etc]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set test month
        id: set-month
        run: echo "MONTH=$(date +%Y-%m)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: billing-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run smoke tests with mock server
        run: |
          # Use docker-compose to run tests with mock server
          docker-compose run --rm billing-test \
            pytest \
              --use-mock \
              --env alpha \
              --member ${{ matrix.member }} \
              --month ${{ steps.set-month.outputs.MONTH }} \
              -m "not slow" \
              --junit-xml=/workspace/test-results/test-results-${{ matrix.member }}.xml \
              --cov=libs \
              --cov-report=xml:/workspace/coverage-reports/coverage-${{ matrix.member }}.xml \
              --cov-report=term-missing \
              -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.member }}
          path: test-results/test-results-${{ matrix.member }}.xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-reports/coverage-${{ matrix.member }}.xml
          flags: ${{ matrix.member }}
          name: coverage-${{ matrix.member }}
          fail_ci_if_error: false

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/billing-test
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, test]
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Publish test results
        uses: dorny/test-reporter@v1
        with:
          name: Test Results Summary
          path: '*.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Create status check
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const lintStatus = '${{ needs.lint.result }}';
            const testStatus = '${{ needs.test.result }}';
            
            let conclusion = 'success';
            let title = '✅ All checks passed';
            let summary = 'Lint and tests completed successfully.';
            
            if (lintStatus === 'failure' || testStatus === 'failure') {
              conclusion = 'failure';
              title = '❌ Some checks failed';
              summary = `Lint: ${lintStatus}, Test: ${testStatus}`;
            }
            
            github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'CI Status',
              head_sha: context.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: title,
                summary: summary
              }
            });
