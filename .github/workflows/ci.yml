name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  USE_MOCK_SERVER: 'true'
  MOCK_SERVER_PORT: '5000'

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy
    
    - name: Run ruff
      run: ruff check .
    
    - name: Run mypy
      run: mypy --config-file mypy.ini .

  test:
    name: Test and Coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        test-type: [unit, integration, contract]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-cov pytest-html
    
    - name: Start Mock Server (Background)
      if: matrix.test-type != 'unit'
      run: |
        python -m mock_server.run_server &
        sleep 5
      shell: bash
    
    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        python -m pytest tests/unit/ \
          --cov=libs \
          --cov-report=xml:coverage-unit.xml \
          --cov-report=html:htmlcov-unit \
          --cov-report=term \
          --junitxml=test-results-unit.xml \
          -n auto
    
    - name: Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        python -m pytest tests/integration/ \
          --use-mock \
          --cov=libs \
          --cov-report=xml:coverage-integration.xml \
          --cov-report=html:htmlcov-integration \
          --cov-report=term \
          --junitxml=test-results-integration.xml \
          -n auto
    
    - name: Run Contract Tests
      if: matrix.test-type == 'contract'
      run: |
        python -m pytest tests/contracts/ \
          --use-mock \
          --cov=libs \
          --cov-report=xml:coverage-contract.xml \
          --cov-report=html:htmlcov-contract \
          --cov-report=term \
          --junitxml=test-results-contract.xml
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.test-type }}
        path: |
          test-results-*.xml
          coverage-*.xml
          htmlcov-*/
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-${{ matrix.test-type }}.xml
        flags: ${{ matrix.test-type }}
        name: ${{ matrix.test-type }}-coverage

  coverage-check:
    name: Coverage Validation
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all coverage reports
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install coverage
      run: pip install coverage
    
    - name: Combine coverage reports
      run: |
        coverage combine artifacts/*/coverage-*.xml
        coverage report --fail-under=80
        coverage html -d htmlcov-combined
    
    - name: Upload combined coverage
      uses: actions/upload-artifact@v3
      with:
        name: combined-coverage
        path: htmlcov-combined/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit Security Scan
      uses: gaurav-nelson/bandit-action@v1
      with:
        path: "libs tests"
    
    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [lint, test, coverage-check, security]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./htmlcov-combined