name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.7.1'
  MIN_COVERAGE: '80'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Black
        run: poetry run black . --check --diff

      - name: Run Ruff
        run: poetry run ruff check . --output-format=github

      - name: Run mypy
        run: poetry run mypy libs --strict

      - name: Run Bandit security check
        run: poetry run bandit -r libs -ll

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run tests with coverage
        run: |
          poetry run pytest \
            --cov=libs \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=${{ env.MIN_COVERAGE }} \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-py${{ matrix.python-version }}
          fail_ci_if_error: true

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: coverage-report-py${{ matrix.python-version }}
          path: htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        member: [kr, jp, etc]
        env: [alpha]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: billing-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start mock server
        run: |
          docker-compose up -d mock-server
          sleep 5

      - name: Run integration tests
        run: |
          docker-compose run --rm billing-test \
            pytest tests -m "integration" \
              --env ${{ matrix.env }} \
              --member ${{ matrix.member }} \
              --use-mock \
              -v

      - name: Cleanup
        if: always()
        run: docker-compose down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test-coverage, integration-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/billing-test
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy notification
        run: |
          echo "Deploy to production environment"
          echo "Image: ${{ secrets.DOCKER_USERNAME }}/billing-test:latest"
          # Add actual deployment steps here

  summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lint-and-type-check, test-coverage, integration-tests, security-scan]
    
    steps:
      - name: Create status summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = {
              'Lint & Type Check': '${{ needs.lint-and-type-check.result }}',
              'Test Coverage': '${{ needs.test-coverage.result }}',
              'Integration Tests': '${{ needs.integration-tests.result }}',
              'Security Scan': '${{ needs.security-scan.result }}'
            };
            
            const failed = Object.entries(jobs).filter(([_, status]) => status === 'failure');
            const succeeded = Object.entries(jobs).filter(([_, status]) => status === 'success');
            
            let title, summary;
            if (failed.length === 0) {
              title = '✅ All CI checks passed';
              summary = `All ${succeeded.length} jobs completed successfully.`;
            } else {
              title = '❌ Some CI checks failed';
              summary = `${failed.length} job(s) failed: ${failed.map(([name]) => name).join(', ')}`;
            }
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'CI/CD Status',
              head_sha: context.sha,
              status: 'completed',
              conclusion: failed.length === 0 ? 'success' : 'failure',
              output: {
                title: title,
                summary: summary
              }
            });