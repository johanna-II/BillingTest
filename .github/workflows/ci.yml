name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  POETRY_VERSION: '2.2.1'

jobs:
  # Quick checks first
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      
      - name: Run linters
        run: |
          poetry run make lint-check
          poetry run make format-check

  # Run tests with Docker
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        test-type: [unit, integration, contracts]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Run tests with Docker
        run: |
          # Docker Compose is included in GitHub Actions Ubuntu runners
          docker compose version || docker-compose --version
          
          # Install required packages for the test runner
          pip install requests
          
          # Run specific test type
          python scripts/run_tests.py ${{ matrix.test-type }}
        env:
          DOCKER_BUILD_NO_CACHE: "true"

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      
      - name: Run security scan
        run: |
          poetry run bandit -r libs/ -f json -o security_report.json || true
          poetry run safety check --json > safety_report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security_report.json
            safety_report.json

  # Final status check
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ]; then
            echo "❌ CI failed!"
            exit 1
          fi
          echo "✅ CI passed!"