name: Billing Test CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment (alpha)'
        required: true
        default: 'alpha'
        type: choice
        options:
          - alpha
      member:
        description: 'Member country (kr, jp, etc)'
        required: true
        default: 'kr'
        type: choice
        options:
          - kr
          - jp
          - etc
      month:
        description: 'Test target month (YYYY-MM)'
        required: false
        default: ''
      test_file:
        description: 'Specific test file or test case'
        required: false
        default: ''

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '2.2.1'

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Run linters
        run: |
          poetry run make lint-check
          poetry run make format-check
      
      - name: Run type checking
        run: poetry run make type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Run unit tests
        run: |
          poetry run python scripts/test/run_category.py unit --parallel 4 --coverage
      
      - name: Upload coverage reports
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Run integration tests with mock server
        run: |
          poetry run python scripts/ci_integration_test.py
        env:
          ENV: ${{ github.event.inputs.env || 'alpha' }}
          MEMBER: ${{ github.event.inputs.member || 'kr' }}
          MONTH: ${{ github.event.inputs.month || '' }}
          MOCK_SERVER_PORT: 5000
          USE_MOCK_SERVER: true

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      
      - name: Run contract tests with mock server
        run: |
          poetry run python scripts/ci_contract_test.py
        env:
          MOCK_SERVER_PORT: 5000
          USE_MOCK_SERVER: true

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      
      - name: Run security tests
        run: |
          poetry run python scripts/test/run_category.py security --parallel 2
      
      - name: Run Bandit security scan
        run: |
          poetry run bandit -r libs/ -f json -o security_scan.json || true
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: security_scan.json

  all-tests:
    name: All Tests Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, contract-tests, security-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.contract-tests.result }}" != "success" ] || \
             [ "${{ needs.security-tests.result }}" != "success" ]; then
            echo "Some tests failed!"
            exit 1
          fi
          echo "All tests passed!"