name: Scheduled Full Test Suite

on:
  schedule:
    # Run at 2 AM UTC every day (11 AM KST)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - performance
          - contracts

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '2.2.1'

jobs:
  # Full test matrix for comprehensive coverage
  full-test-suite:
    name: Full Test - ${{ matrix.member }} (${{ matrix.month }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        member: [kr, jp, etc]
        month: ['current', 'previous']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set test month
        id: set-month
        run: |
          if [ "${{ matrix.month }}" = "current" ]; then
            echo "MONTH=$(date +%Y-%m)" >> $GITHUB_OUTPUT
          else
            echo "MONTH=$(date -d "1 month ago" +%Y-%m)" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run full test suite
        run: |
          poetry run pytest \
            --env alpha \
            --member ${{ matrix.member }} \
            --month ${{ steps.set-month.outputs.MONTH }} \
            --cov=libs \
            --cov-report=xml \
            --junit-xml=test-results-${{ matrix.member }}-${{ matrix.month }}.xml \
            -v
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.member }}-${{ matrix.month }}
          path: test-results-*.xml

      - name: Upload coverage
        # Using specific commit SHA for security (codecov-action v5.0.7)
        uses: codecov/codecov-action@5c47607acb93fed5485fdbf7232e8a31425f672a  # v5.0.7
        with:
          file: ./coverage.xml
          flags: scheduled-${{ matrix.member }}

  # Performance benchmark tests
  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run performance tests
        run: |
          poetry run pytest tests/performance -v \
            --benchmark-only \
            --benchmark-json=performance-results.json \
            --benchmark-autosave
        continue-on-error: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            performance-results.json
            .benchmarks/

  # Security scan with detailed report
  security-scan:
    name: Security Scan (Full)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run comprehensive security scan
        run: |
          # Bandit scan
          poetry run bandit -r libs/ tests/ -f json -o bandit_report.json -ll || true

          # Safety check
          poetry run safety check --json > safety_report.json || true

          # Check for secrets
          poetry run detect-secrets scan --all-files > secrets_report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-full
          path: |
            bandit_report.json
            safety_report.json
            secrets_report.json

  # Test report summary
  test-summary:
    name: Generate Test Summary
    runs-on: ubuntu-latest
    needs: [full-test-suite, performance-tests, security-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate summary report
        run: |
          echo "# Daily Test Report - $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "- Full Test Suite: ${{ needs.full-test-suite.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse test results if available
          if [ -f "test-results-kr-current/test-results-kr-current.xml" ]; then
            echo "## Test Metrics" >> $GITHUB_STEP_SUMMARY
            echo "Processing test results..." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Scheduled tests failed! Check the results above." >> $GITHUB_STEP_SUMMARY
