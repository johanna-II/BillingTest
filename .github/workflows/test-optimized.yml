name: Optimized Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Static Analysis - Run first for quick feedback
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run Black formatter check
        run: black --check .
      
      - name: Run Ruff linter
        run: ruff check .
      
      - name: Run MyPy type checker
        run: mypy libs/ --ignore-missing-imports

  # Unit Tests - Fast, no dependencies
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run unit tests
        run: |
          python -m pytest tests/unit/ \
            -v \
            --cov=libs \
            --cov-report=xml:coverage-unit.xml \
            --cov-report=term-missing \
            --junit-xml=test-results-unit.xml \
            -n auto
      
      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            test-results-unit.xml
            coverage-unit.xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-unit.xml
          flags: unit
          name: unit-coverage

  # Integration Tests - Medium speed, uses mock server
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests  # Only run if unit tests pass
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Start mock server
        run: |
          python -m mock_server.run_server &
          sleep 5
          curl -f http://localhost:5000/health || exit 1
      
      - name: Run integration tests
        env:
          USE_MOCK_SERVER: true
        run: |
          python -m pytest tests/integration/ \
            -v \
            --cov=libs \
            --cov-report=xml:coverage-integration.xml \
            --cov-report=term-missing \
            --junit-xml=test-results-integration.xml \
            -n 4
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results-integration.xml
            coverage-integration.xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-integration.xml
          flags: integration
          name: integration-coverage

  # Contract Tests - Slowest, verifies API contracts
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: integration-tests  # Only run if integration tests pass
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Start mock server
        run: |
          python -m mock_server.run_server &
          sleep 5
          curl -f http://localhost:5000/health || exit 1
      
      - name: Run contract tests
        env:
          USE_MOCK_SERVER: true
        run: |
          python -m pytest tests/contracts/ \
            -v \
            --cov=libs \
            --cov-report=xml:coverage-contracts.xml \
            --cov-report=term-missing \
            --junit-xml=test-results-contracts.xml
      
      - name: Upload contract test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: contract-test-results
          path: |
            test-results-contracts.xml
            coverage-contracts.xml
            tests/contracts/pacts/*.json
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-contracts.xml
          flags: contracts
          name: contract-coverage

  # Test Summary and Reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, contract-tests]
    if: always()
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all test results
        uses: actions/download-artifact@v3
      
      - name: Merge coverage reports
        run: |
          pip install coverage
          coverage combine coverage-*.xml
          coverage report
          coverage html
      
      - name: Upload combined coverage
        uses: actions/upload-artifact@v3
        with:
          name: combined-coverage-report
          path: htmlcov/
      
      - name: Test Report Summary
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: '**/test-results-*.xml'
          reporter: java-junit
          fail-on-error: false

  # Performance Monitoring (Optional - runs on schedule)
  performance-monitor:
    name: Performance Monitor
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run performance benchmarks
        run: |
          python -m pytest tests/unit/ \
            -v \
            --benchmark-only \
            --benchmark-json=benchmark.json
      
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

# Schedule performance monitoring
schedule:
  - cron: '0 0 * * 0'  # Weekly on Sunday
