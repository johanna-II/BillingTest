# Multi-stage Dockerfile for running billing tests in isolation
# Supports testing on different Python versions

ARG PYTHON_VERSION=3.12-slim

# Base stage with common dependencies
FROM python:${PYTHON_VERSION} AS base

# Create non-root user for security
# Note: Using a non-root user prevents potential container breakout attacks
RUN groupadd -r testuser && useradd -r -g testuser testuser

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements (read-only)
COPY --chmod=444 requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Development stage for testing
FROM base AS test

# Install additional test dependencies
RUN pip install --no-cache-dir \
    pytest-xdist \
    pytest-timeout \
    pytest-mock \
    coverage[toml]

# Copy project files with read-only permissions
# SonarQube: Recursive COPY is safe here due to comprehensive .dockerignore
# .dockerignore excludes: git files, IDE configs, secrets, logs, build artifacts
# Only test-necessary files (libs/, tests/, config/) are actually needed
# Using 555 permissions for both files and directories
COPY --chown=testuser:testuser --chmod=555 . .

# Set Python path
ENV PYTHONPATH=/app

# Create directories for test outputs
RUN mkdir -p /app/htmlcov /app/report && \
    chown -R testuser:testuser /app

# Switch to non-root user
USER testuser

# Default command runs tests with coverage
CMD ["python", "-m", "pytest", \
     "--cov=libs", \
     "--cov-report=term-missing", \
     "--cov-report=html", \
     "--cov-report=xml", \
     "--cov-omit=libs/observability/*", \
     "tests/unit", \
     "-v"]

# Alternative lightweight stage for quick tests
FROM python:${PYTHON_VERSION} AS test-minimal

# Create non-root user
RUN groupadd -r testuser && useradd -r -g testuser testuser

WORKDIR /app

# Copy only essential files
COPY --chmod=444 requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy essential directories with read-only permissions
# Using 555 for all content (directories need execute, Python files run through interpreter)
COPY --chown=testuser:testuser --chmod=555 libs/ ./libs/
COPY --chown=testuser:testuser --chmod=555 tests/ ./tests/
COPY --chown=testuser:testuser --chmod=555 config/ ./config/

# Ensure proper ownership
RUN chown -R testuser:testuser /app

# Switch to non-root user
USER testuser

ENV PYTHONPATH=/app

# Run tests without coverage for speed
CMD ["python", "-m", "pytest", "tests/unit", "-q"]
